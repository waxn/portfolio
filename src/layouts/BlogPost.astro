---
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import BaseHead from '../components/BaseHead.astro';
import Footer from '../components/sections/Footer.astro';
import FormattedDate from '../components/FormattedDate.astro';
import Header from '../components/sections/Header.astro';
import PostMeta from '../components/ui/meta/PostMeta.astro';
import ShareButtons from '../components/ui/share/ShareButtons.astro';
import PostNav from '../components/ui/nav/PostNav.astro';

type BlogData = CollectionEntry<'blog'>['data'];
type Props = BlogData & { showHeader?: boolean; prevPost?: { id: string; title: string } | null; nextPost?: { id: string; title: string } | null; readingTimeMin?: number };

const { title, description, pubDate, updatedDate, heroImage, showHeader = true, prevPost = null, nextPost = null, readingTimeMin = 0 } = Astro.props as Props;
---

<html lang="en" data-theme="dark" class="dark">
	<head>
		<BaseHead title={title} description={description} image={heroImage} />
		<meta property="og:type" content="article" />
		<!-- Article specific OG meta -->
		{pubDate && <meta property="article:published_time" content={new Date(pubDate).toISOString()} />}
		{updatedDate && <meta property="article:modified_time" content={new Date(updatedDate).toISOString()} />}
		<meta property="article:author" content={Astro.props.author || 'Linus Thoreson'} />
		{Array.isArray(Astro.props.tags) && Astro.props.tags.map((t) => (
		  <meta property="article:tag" content={t} />
		))}

		<!-- JSON-LD: Article -->
		<script type="application/ld+json" set:html={JSON.stringify({
		  '@context': 'https://schema.org',
		  '@type': 'Article',
		  headline: title,
		  description,
		  image: Astro.props.heroImage ? new URL(Astro.props.heroImage.src, Astro.site).toString() : undefined,
		  datePublished: pubDate ? new Date(pubDate).toISOString() : undefined,
		  dateModified: updatedDate ? new Date(updatedDate).toISOString() : undefined,
		  author: [{ '@type': 'Person', name: Astro.props.author || 'Linus Thoreson' }],
		  publisher: { '@type': 'Organization', name: 'guihubie.com' },
		  mainEntityOfPage: new URL(Astro.url.pathname, Astro.site).toString(),
		  url: new URL(Astro.url.pathname, Astro.site).toString(),
		})} />

		<!-- JSON-LD: Breadcrumbs -->
		<script type="application/ld+json" set:html={JSON.stringify({
		  '@context': 'https://schema.org',
		  '@type': 'BreadcrumbList',
		  itemListElement: [
		    { '@type': 'ListItem', position: 1, name: 'Home', item: new URL('/', Astro.site).toString() },
		    { '@type': 'ListItem', position: 2, name: 'Blog', item: new URL('/blog/', Astro.site).toString() },
		    { '@type': 'ListItem', position: 3, name: title, item: new URL(Astro.url.pathname, Astro.site).toString() },
		  ],
		})} />
		<style>
				/* Align blog layout with site container to avoid right overflow and tight column */
				main {
					width: 1280px;
					max-width: calc(100% - 2em);
					margin: auto;
					background: var(--color-bg-primary);
				}
			.hero-image {
				width: 100%;
			}
			.hero-image img {
				display: block;
				margin: 0 auto;
				border-radius: 12px;
				box-shadow: var(--box-shadow);
			}
				.prose {
					width: 100%;
					max-width: 870px; /* widen column */
					margin: auto;
					padding: 0.05em;
					color: var(--color-text-secondary);
				}
            .title {
				margin-bottom: 1em;
				padding: 1em 0;
				text-align: center;
				line-height: 1;
			}
			.title h1 {
                margin: 0 0 0.5em 0;
                color: var(--color-text-primary);
			}
			.date {
                margin-bottom: 0.5em;
                color: var(--color-text-muted);
			}
			.last-updated-on {
				font-style: italic;
			}
		</style>
	</head>

	<body>
		<Header />
		<main>
			<article>
                {showHeader && (
                    <div class="hero-image">
                        {heroImage && <Image width={1020} height={510} src={heroImage} alt="" />}
                    </div>
                )}
                <div class="prose">
                    {showHeader && (
                        <div class="title">
                            <div class="date">
                                <FormattedDate date={pubDate} />
                                {
                                    updatedDate && (
                                        <div class="last-updated-on">
                                            Last updated on <FormattedDate date={updatedDate} />
                                        </div>
                                    )
                                }
                            </div>
                            <h1>{title}</h1>
                            <hr />
                        </div>
                    )}
                    <ShareButtons title={title} url={Astro.url.toString()} />
					<PostMeta pubDate={pubDate} readingTimeMin={readingTimeMin} authorName={Astro.props.author || 'Linus Thoreson'} />
                    <slot />
                    <PostNav prev={prevPost} next={nextPost} />
                </div>
			</article>
		</main>
		<Footer />
	</body>
</html>
